apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-dashboard
  namespace: metrics-dashboard
  labels:
    app.kubernetes.io/name: metrics-dashboard
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubernetes
spec:
  replicas: 3  # High availability with 3 replicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: metrics-dashboard
  template:
    metadata:
      labels:
        app: metrics-dashboard
        app.kubernetes.io/name: metrics-dashboard
        app.kubernetes.io/component: application
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: metrics-dashboard-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      # Init container to verify database connectivity
      initContainers:
      - name: db-migration
        image: your-acr.azurecr.io/metrics-dashboard-backend:latest
        command:
        - sh
        - -c
        - |
          echo "Checking database connectivity..."
          until nc -z $DB_HOST $DB_PORT; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Database is ready!"
          # Run database migrations here if needed
          # npm run migrate
        envFrom:
        - configMapRef:
            name: metrics-dashboard-config
        - secretRef:
            name: metrics-dashboard-secrets
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      containers:
      # Frontend Container (nginx)
      - name: frontend
        image: your-acr.azurecr.io/metrics-dashboard-frontend:latest
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: metrics-dashboard-config
        env:
        - name: BACKEND_URL
          value: "http://localhost:3001"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /var/cache/nginx
        - name: run-volume
          mountPath: /var/run
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      
      # Backend Container (Node.js API)
      - name: backend
        image: your-acr.azurecr.io/metrics-dashboard-backend:latest
        ports:
        - containerPort: 3001
          name: api
          protocol: TCP
        envFrom:
        - configMapRef:
            name: metrics-dashboard-config
        - secretRef:
            name: metrics-dashboard-secrets
        env:
        - name: DATABASE_URL
          value: "postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=require"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
        - name: secrets-store
          mountPath: /mnt/secrets-store
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          defaultMode: 0644
      - name: logs-volume
        persistentVolumeClaim:
          claimName: metrics-dashboard-logs
      - name: tmp-volume
        persistentVolumeClaim:
          claimName: metrics-dashboard-tmp
      - name: cache-volume
        emptyDir: {}
      - name: run-volume
        emptyDir: {}
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: metrics-dashboard-secrets-provider
      
      # Pod scheduling and affinity
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - metrics-dashboard
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for node taints (if using dedicated node pools)
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "application"
        effect: "NoSchedule"
      
      # Restart policy
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
      # DNS policy
      dnsPolicy: ClusterFirst
