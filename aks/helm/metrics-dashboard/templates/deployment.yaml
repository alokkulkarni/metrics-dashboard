apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "metrics-dashboard.fullname" . }}
  labels:
    {{- include "metrics-dashboard.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "metrics-dashboard.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "metrics-dashboard.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "metrics-dashboard.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        {{- if .Values.singlePod.database.embedded.enabled }}
        # PostgreSQL Container
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: {{ .Values.singlePod.database.embedded.database }}
            - name: POSTGRES_USER
              value: {{ .Values.singlePod.database.embedded.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.singlePod.database.embedded.password }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
        {{- end }}
        
        # Backend Container
        - name: backend
          image: "{{ .Values.image.repository }}-backend:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.singlePod.backend.port }}
              protocol: TCP
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            # Secrets from secret object
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "metrics-dashboard.fullname" . }}-secret
                  key: db-password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "metrics-dashboard.fullname" . }}-secret
                  key: jwt-secret
            - name: JIRA_BASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "metrics-dashboard.fullname" . }}-secret
                  key: jira-base-url
            - name: JIRA_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ include "metrics-dashboard.fullname" . }}-secret
                  key: jira-email
            - name: JIRA_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "metrics-dashboard.fullname" . }}-secret
                  key: jira-api-token
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.singlePod.backend.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.singlePod.backend.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        
        # Frontend Container (Nginx)
        - name: frontend
          image: "{{ .Values.image.repository }}-frontend:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.singlePod.frontend.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.singlePod.frontend.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.singlePod.frontend.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
      
      volumes:
        {{- if .Values.singlePod.database.embedded.enabled }}
        - name: postgres-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "metrics-dashboard.fullname" . }}-postgres-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
